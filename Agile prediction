import pandas as pd
import numpy as np

# Setting a random seed for reproducibility
np.random.seed(42)

# Number of samples
n_samples = 1000

# Generate synthetic data
data = {
    'task_complexity': np.random.uniform(1, 5, n_samples),
    'number_of_team_members': np.random.randint(5, 15, n_samples),
    'team_experience_level': np.random.choice([1, 2, 3], n_samples),  # 1: Low, 2: Medium, 3: High
    'number_of_tasks': np.random.randint(10, 50, n_samples),
    'sprint_velocity': np.random.randint(20, 100, n_samples),
    'number_of_impediments': np.random.randint(0, 10, n_samples),
    'acceptance_criteria_clarity': np.random.uniform(1, 10, n_samples),
    'number_of_acceptance_criteria': np.random.randint(1, 10, n_samples),
    'number_of_bugs': np.random.randint(0, 20, n_samples),
    'team_satisfaction_score': np.random.uniform(1, 10, n_samples)
}

# Target variable: number of days to complete the task
# For simplicity, assume it depends on task complexity, team experience, and impediments
data['days_to_complete'] = (
    data['task_complexity'] * np.random.uniform(1, 3, n_samples) +
    10 / data['team_experience_level'] +
    data['number_of_impediments'] * np.random.uniform(0.5, 1.5, n_samples)
).astype(int)

# Create a DataFrame
df = pd.DataFrame(data)

# Save to CSV
df.to_csv('synthetic_task_data.csv', index=False)

print("Synthetic dataset created and saved as 'synthetic_task_data.csv'")

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the synthetic dataset
data = pd.read_csv('synthetic_task_data.csv')

# Define features and target variable
X = data.drop('days_to_complete', axis=1)
y = data['days_to_complete']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
rf_regressor = RandomForestRegressor(random_state=42)
rf_regressor.fit(X_train, y_train)

# Predictions
y_pred = rf_regressor.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'Mean Absolute Error: {mae:.2f}')
print(f'R-squared: {r2:.2f}')

# Display some of the predictions along with actual values
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(results.head())

# Example of new data (replace with actual new data)
new_data = pd.DataFrame({
    'task_complexity': [3.5, 2.8],
    'number_of_team_members': [8, 10],
    'team_experience_level': [3, 2],
    'number_of_tasks': [20, 25],
    'sprint_velocity': [80, 50],
    'number_of_impediments': [1, 4],
    'acceptance_criteria_clarity': [9.0, 7.5],
    'number_of_acceptance_criteria': [3, 5],
    'number_of_bugs': [3, 6],
    'team_satisfaction_score': [8.0, 6.5]
})

# Predicting the days to complete tasks for new data
new_predictions = rf_regressor.predict(new_data)
print("Predicted Days to Complete Tasks for New Data:", new_predictions)

