[HttpGet("paginated-items")]
public async Task<IActionResult> GetPaginatedItems(int pageNumber = 1, int pageSize = 10)
{
    var totalItems = await _context.Items.CountAsync();
    var items = await _context.Items
        .Skip((pageNumber - 1) * pageSize)
        .Take(pageSize)
        .ToListAsync();

    var response = new
    {
        TotalItems = totalItems,
        Items = items
    };

    return Ok(response);
}






import React, { useState, useEffect } from 'react';
import axios from 'axios';

const PaginatedList = () => {
  const [items, setItems] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(10);
  const [totalItems, setTotalItems] = useState(0);

  useEffect(() => {
    fetchItems(currentPage, pageSize);
  }, [currentPage, pageSize]);

  const fetchItems = async (pageNumber, pageSize) => {
    try {
      const response = await axios.get('https://yourapi/paginated-items', {
        params: {
          pageNumber,
          pageSize
        }
      });
      setItems(response.data.items);
      setTotalItems(response.data.totalItems);
    } catch (error) {
      console.error('Error fetching items:', error);
    }
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const totalPages = Math.ceil(totalItems / pageSize);

  return (
    <div>
      <ul>
        {items.map(item => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
      <div>
        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index + 1}
            onClick={() => handlePageChange(index + 1)}
            disabled={currentPage === index + 1}
          >
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default PaginatedList;
